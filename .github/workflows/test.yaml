name: Test with Report

on:
  pull_request:
    branches: [ main, develop ]
    types: [ opened, synchronize, reopened ]

permissions:
  contents: read
  pull-requests: write
  checks: write

jobs:
  test-repository:
    name: Repository Tests with Coverage Report
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'
        cache: true
    
    - name: Install dependencies
      run: |
        go mod download
        go mod verify
    
    - name: Generate Ent code
      run: |
        go generate ./infrastructure/ent
  
    - name: Run repository tests with coverage
      run: |
        go test -v -race -coverprofile=coverage.out -covermode=atomic ./infrastructure/persistence/... > test-results.txt 2>&1
        go tool cover -html=coverage.out -o coverage.html
    
    - name: Generate coverage report
      id: coverage
      run: |
        COVERAGE=$(go tool cover -func=coverage.out | grep total | awk '{print $3}')
        echo "coverage=$COVERAGE" >> $GITHUB_OUTPUT
    
    - name: Comment PR with test results
      uses: actions/github-script@v7
      if: github.event_name == 'pull_request'
      with:
        github-token: ${{secrets.GITHUB_TOKEN}}
        script: |
          const coverage = '${{ steps.coverage.outputs.coverage }}';
          const fs = require('fs');
          
          // テスト結果を読み込む
          let testResults = 'テスト結果を読み込めませんでした';
          try {
            testResults = fs.readFileSync('test-results.txt', 'utf8');
            // 長すぎる場合は最後の部分のみ表示
            if (testResults.length > 3000) {
              testResults = '...\n' + testResults.slice(-3000);
            }
          } catch (error) {
            console.error('テスト結果の読み込みに失敗:', error);
          }
          
          const body = `## 🧪 テスト結果
          
          ### Repository層のテスト
          - **カバレッジ**: ${coverage}
          - **ステータス**: ${{ job.status }}
          
          <details>
          <summary>テスト出力の詳細</summary>
          
          \`\`\`
          ${testResults}
          \`\`\`
          </details>
          
          ---
          _このコメントは自動的に生成されました by GitHub Actions_`;
          
          // 既存のコメントを探す
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });
          
          const botComment = comments.find(comment => 
            comment.user.type === 'Bot' && comment.body.includes('🧪 テスト結果')
          );
          
          // 既存のコメントがあれば更新、なければ新規作成
          if (botComment) {
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: body
            });
          } else {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: body
            });
          }