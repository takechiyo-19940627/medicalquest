// Code generated by ent, DO NOT EDIT.

package question

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/takechiyo-19940627/medicalquest/infrastructure/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Question {
	return predicate.Question(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Question {
	return predicate.Question(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Question {
	return predicate.Question(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Question {
	return predicate.Question(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Question {
	return predicate.Question(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Question {
	return predicate.Question(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Question {
	return predicate.Question(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Question {
	return predicate.Question(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Question {
	return predicate.Question(sql.FieldLTE(FieldID, id))
}

// ReferenceCode applies equality check predicate on the "reference_code" field. It's identical to ReferenceCodeEQ.
func ReferenceCode(v string) predicate.Question {
	return predicate.Question(sql.FieldEQ(FieldReferenceCode, v))
}

// Title applies equality check predicate on the "title" field. It's identical to TitleEQ.
func Title(v string) predicate.Question {
	return predicate.Question(sql.FieldEQ(FieldTitle, v))
}

// Content applies equality check predicate on the "content" field. It's identical to ContentEQ.
func Content(v string) predicate.Question {
	return predicate.Question(sql.FieldEQ(FieldContent, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Question {
	return predicate.Question(sql.FieldEQ(FieldCreatedAt, v))
}

// ReferenceCodeEQ applies the EQ predicate on the "reference_code" field.
func ReferenceCodeEQ(v string) predicate.Question {
	return predicate.Question(sql.FieldEQ(FieldReferenceCode, v))
}

// ReferenceCodeNEQ applies the NEQ predicate on the "reference_code" field.
func ReferenceCodeNEQ(v string) predicate.Question {
	return predicate.Question(sql.FieldNEQ(FieldReferenceCode, v))
}

// ReferenceCodeIn applies the In predicate on the "reference_code" field.
func ReferenceCodeIn(vs ...string) predicate.Question {
	return predicate.Question(sql.FieldIn(FieldReferenceCode, vs...))
}

// ReferenceCodeNotIn applies the NotIn predicate on the "reference_code" field.
func ReferenceCodeNotIn(vs ...string) predicate.Question {
	return predicate.Question(sql.FieldNotIn(FieldReferenceCode, vs...))
}

// ReferenceCodeGT applies the GT predicate on the "reference_code" field.
func ReferenceCodeGT(v string) predicate.Question {
	return predicate.Question(sql.FieldGT(FieldReferenceCode, v))
}

// ReferenceCodeGTE applies the GTE predicate on the "reference_code" field.
func ReferenceCodeGTE(v string) predicate.Question {
	return predicate.Question(sql.FieldGTE(FieldReferenceCode, v))
}

// ReferenceCodeLT applies the LT predicate on the "reference_code" field.
func ReferenceCodeLT(v string) predicate.Question {
	return predicate.Question(sql.FieldLT(FieldReferenceCode, v))
}

// ReferenceCodeLTE applies the LTE predicate on the "reference_code" field.
func ReferenceCodeLTE(v string) predicate.Question {
	return predicate.Question(sql.FieldLTE(FieldReferenceCode, v))
}

// ReferenceCodeContains applies the Contains predicate on the "reference_code" field.
func ReferenceCodeContains(v string) predicate.Question {
	return predicate.Question(sql.FieldContains(FieldReferenceCode, v))
}

// ReferenceCodeHasPrefix applies the HasPrefix predicate on the "reference_code" field.
func ReferenceCodeHasPrefix(v string) predicate.Question {
	return predicate.Question(sql.FieldHasPrefix(FieldReferenceCode, v))
}

// ReferenceCodeHasSuffix applies the HasSuffix predicate on the "reference_code" field.
func ReferenceCodeHasSuffix(v string) predicate.Question {
	return predicate.Question(sql.FieldHasSuffix(FieldReferenceCode, v))
}

// ReferenceCodeIsNil applies the IsNil predicate on the "reference_code" field.
func ReferenceCodeIsNil() predicate.Question {
	return predicate.Question(sql.FieldIsNull(FieldReferenceCode))
}

// ReferenceCodeNotNil applies the NotNil predicate on the "reference_code" field.
func ReferenceCodeNotNil() predicate.Question {
	return predicate.Question(sql.FieldNotNull(FieldReferenceCode))
}

// ReferenceCodeEqualFold applies the EqualFold predicate on the "reference_code" field.
func ReferenceCodeEqualFold(v string) predicate.Question {
	return predicate.Question(sql.FieldEqualFold(FieldReferenceCode, v))
}

// ReferenceCodeContainsFold applies the ContainsFold predicate on the "reference_code" field.
func ReferenceCodeContainsFold(v string) predicate.Question {
	return predicate.Question(sql.FieldContainsFold(FieldReferenceCode, v))
}

// TitleEQ applies the EQ predicate on the "title" field.
func TitleEQ(v string) predicate.Question {
	return predicate.Question(sql.FieldEQ(FieldTitle, v))
}

// TitleNEQ applies the NEQ predicate on the "title" field.
func TitleNEQ(v string) predicate.Question {
	return predicate.Question(sql.FieldNEQ(FieldTitle, v))
}

// TitleIn applies the In predicate on the "title" field.
func TitleIn(vs ...string) predicate.Question {
	return predicate.Question(sql.FieldIn(FieldTitle, vs...))
}

// TitleNotIn applies the NotIn predicate on the "title" field.
func TitleNotIn(vs ...string) predicate.Question {
	return predicate.Question(sql.FieldNotIn(FieldTitle, vs...))
}

// TitleGT applies the GT predicate on the "title" field.
func TitleGT(v string) predicate.Question {
	return predicate.Question(sql.FieldGT(FieldTitle, v))
}

// TitleGTE applies the GTE predicate on the "title" field.
func TitleGTE(v string) predicate.Question {
	return predicate.Question(sql.FieldGTE(FieldTitle, v))
}

// TitleLT applies the LT predicate on the "title" field.
func TitleLT(v string) predicate.Question {
	return predicate.Question(sql.FieldLT(FieldTitle, v))
}

// TitleLTE applies the LTE predicate on the "title" field.
func TitleLTE(v string) predicate.Question {
	return predicate.Question(sql.FieldLTE(FieldTitle, v))
}

// TitleContains applies the Contains predicate on the "title" field.
func TitleContains(v string) predicate.Question {
	return predicate.Question(sql.FieldContains(FieldTitle, v))
}

// TitleHasPrefix applies the HasPrefix predicate on the "title" field.
func TitleHasPrefix(v string) predicate.Question {
	return predicate.Question(sql.FieldHasPrefix(FieldTitle, v))
}

// TitleHasSuffix applies the HasSuffix predicate on the "title" field.
func TitleHasSuffix(v string) predicate.Question {
	return predicate.Question(sql.FieldHasSuffix(FieldTitle, v))
}

// TitleEqualFold applies the EqualFold predicate on the "title" field.
func TitleEqualFold(v string) predicate.Question {
	return predicate.Question(sql.FieldEqualFold(FieldTitle, v))
}

// TitleContainsFold applies the ContainsFold predicate on the "title" field.
func TitleContainsFold(v string) predicate.Question {
	return predicate.Question(sql.FieldContainsFold(FieldTitle, v))
}

// ContentEQ applies the EQ predicate on the "content" field.
func ContentEQ(v string) predicate.Question {
	return predicate.Question(sql.FieldEQ(FieldContent, v))
}

// ContentNEQ applies the NEQ predicate on the "content" field.
func ContentNEQ(v string) predicate.Question {
	return predicate.Question(sql.FieldNEQ(FieldContent, v))
}

// ContentIn applies the In predicate on the "content" field.
func ContentIn(vs ...string) predicate.Question {
	return predicate.Question(sql.FieldIn(FieldContent, vs...))
}

// ContentNotIn applies the NotIn predicate on the "content" field.
func ContentNotIn(vs ...string) predicate.Question {
	return predicate.Question(sql.FieldNotIn(FieldContent, vs...))
}

// ContentGT applies the GT predicate on the "content" field.
func ContentGT(v string) predicate.Question {
	return predicate.Question(sql.FieldGT(FieldContent, v))
}

// ContentGTE applies the GTE predicate on the "content" field.
func ContentGTE(v string) predicate.Question {
	return predicate.Question(sql.FieldGTE(FieldContent, v))
}

// ContentLT applies the LT predicate on the "content" field.
func ContentLT(v string) predicate.Question {
	return predicate.Question(sql.FieldLT(FieldContent, v))
}

// ContentLTE applies the LTE predicate on the "content" field.
func ContentLTE(v string) predicate.Question {
	return predicate.Question(sql.FieldLTE(FieldContent, v))
}

// ContentContains applies the Contains predicate on the "content" field.
func ContentContains(v string) predicate.Question {
	return predicate.Question(sql.FieldContains(FieldContent, v))
}

// ContentHasPrefix applies the HasPrefix predicate on the "content" field.
func ContentHasPrefix(v string) predicate.Question {
	return predicate.Question(sql.FieldHasPrefix(FieldContent, v))
}

// ContentHasSuffix applies the HasSuffix predicate on the "content" field.
func ContentHasSuffix(v string) predicate.Question {
	return predicate.Question(sql.FieldHasSuffix(FieldContent, v))
}

// ContentEqualFold applies the EqualFold predicate on the "content" field.
func ContentEqualFold(v string) predicate.Question {
	return predicate.Question(sql.FieldEqualFold(FieldContent, v))
}

// ContentContainsFold applies the ContainsFold predicate on the "content" field.
func ContentContainsFold(v string) predicate.Question {
	return predicate.Question(sql.FieldContainsFold(FieldContent, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Question {
	return predicate.Question(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Question {
	return predicate.Question(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Question {
	return predicate.Question(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Question {
	return predicate.Question(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Question {
	return predicate.Question(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Question {
	return predicate.Question(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Question {
	return predicate.Question(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Question {
	return predicate.Question(sql.FieldLTE(FieldCreatedAt, v))
}

// HasChoices applies the HasEdge predicate on the "choices" edge.
func HasChoices() predicate.Question {
	return predicate.Question(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ChoicesTable, ChoicesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasChoicesWith applies the HasEdge predicate on the "choices" edge with a given conditions (other predicates).
func HasChoicesWith(preds ...predicate.Choice) predicate.Question {
	return predicate.Question(func(s *sql.Selector) {
		step := newChoicesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Question) predicate.Question {
	return predicate.Question(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Question) predicate.Question {
	return predicate.Question(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Question) predicate.Question {
	return predicate.Question(sql.NotPredicates(p))
}
