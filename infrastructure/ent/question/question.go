// Code generated by ent, DO NOT EDIT.

package question

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the question type in the database.
	Label = "question"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldReferenceCode holds the string denoting the reference_code field in the database.
	FieldReferenceCode = "reference_code"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// FieldContent holds the string denoting the content field in the database.
	FieldContent = "content"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// EdgeChoices holds the string denoting the choices edge name in mutations.
	EdgeChoices = "choices"
	// Table holds the table name of the question in the database.
	Table = "questions"
	// ChoicesTable is the table that holds the choices relation/edge.
	ChoicesTable = "choices"
	// ChoicesInverseTable is the table name for the Choice entity.
	// It exists in this package in order to avoid circular dependency with the "choice" package.
	ChoicesInverseTable = "choices"
	// ChoicesColumn is the table column denoting the choices relation/edge.
	ChoicesColumn = "question_choices"
)

// Columns holds all SQL columns for question fields.
var Columns = []string{
	FieldID,
	FieldReferenceCode,
	FieldTitle,
	FieldContent,
	FieldCreatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// TitleValidator is a validator for the "title" field. It is called by the builders before save.
	TitleValidator func(string) error
	// ContentValidator is a validator for the "content" field. It is called by the builders before save.
	ContentValidator func(string) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// IDValidator is a validator for the "id" field. It is called by the builders before save.
	IDValidator func(int) error
)

// OrderOption defines the ordering options for the Question queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByReferenceCode orders the results by the reference_code field.
func ByReferenceCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldReferenceCode, opts...).ToFunc()
}

// ByTitle orders the results by the title field.
func ByTitle(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTitle, opts...).ToFunc()
}

// ByContent orders the results by the content field.
func ByContent(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldContent, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByChoicesCount orders the results by choices count.
func ByChoicesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newChoicesStep(), opts...)
	}
}

// ByChoices orders the results by choices terms.
func ByChoices(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newChoicesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newChoicesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ChoicesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ChoicesTable, ChoicesColumn),
	)
}
