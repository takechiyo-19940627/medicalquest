// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/takechiyo-19940627/medicalquest/infrastructure/ent/choice"
	"github.com/takechiyo-19940627/medicalquest/infrastructure/ent/question"
)

// ChoiceCreate is the builder for creating a Choice entity.
type ChoiceCreate struct {
	config
	mutation *ChoiceMutation
	hooks    []Hook
}

// SetContent sets the "content" field.
func (cc *ChoiceCreate) SetContent(s string) *ChoiceCreate {
	cc.mutation.SetContent(s)
	return cc
}

// SetIsCorrect sets the "is_correct" field.
func (cc *ChoiceCreate) SetIsCorrect(b bool) *ChoiceCreate {
	cc.mutation.SetIsCorrect(b)
	return cc
}

// SetNillableIsCorrect sets the "is_correct" field if the given value is not nil.
func (cc *ChoiceCreate) SetNillableIsCorrect(b *bool) *ChoiceCreate {
	if b != nil {
		cc.SetIsCorrect(*b)
	}
	return cc
}

// SetCreatedAt sets the "created_at" field.
func (cc *ChoiceCreate) SetCreatedAt(t time.Time) *ChoiceCreate {
	cc.mutation.SetCreatedAt(t)
	return cc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cc *ChoiceCreate) SetNillableCreatedAt(t *time.Time) *ChoiceCreate {
	if t != nil {
		cc.SetCreatedAt(*t)
	}
	return cc
}

// SetID sets the "id" field.
func (cc *ChoiceCreate) SetID(i int) *ChoiceCreate {
	cc.mutation.SetID(i)
	return cc
}

// SetQuestionID sets the "question" edge to the Question entity by ID.
func (cc *ChoiceCreate) SetQuestionID(id int) *ChoiceCreate {
	cc.mutation.SetQuestionID(id)
	return cc
}

// SetQuestion sets the "question" edge to the Question entity.
func (cc *ChoiceCreate) SetQuestion(q *Question) *ChoiceCreate {
	return cc.SetQuestionID(q.ID)
}

// Mutation returns the ChoiceMutation object of the builder.
func (cc *ChoiceCreate) Mutation() *ChoiceMutation {
	return cc.mutation
}

// Save creates the Choice in the database.
func (cc *ChoiceCreate) Save(ctx context.Context) (*Choice, error) {
	cc.defaults()
	return withHooks(ctx, cc.sqlSave, cc.mutation, cc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cc *ChoiceCreate) SaveX(ctx context.Context) *Choice {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cc *ChoiceCreate) Exec(ctx context.Context) error {
	_, err := cc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cc *ChoiceCreate) ExecX(ctx context.Context) {
	if err := cc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cc *ChoiceCreate) defaults() {
	if _, ok := cc.mutation.IsCorrect(); !ok {
		v := choice.DefaultIsCorrect
		cc.mutation.SetIsCorrect(v)
	}
	if _, ok := cc.mutation.CreatedAt(); !ok {
		v := choice.DefaultCreatedAt()
		cc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cc *ChoiceCreate) check() error {
	if _, ok := cc.mutation.Content(); !ok {
		return &ValidationError{Name: "content", err: errors.New(`ent: missing required field "Choice.content"`)}
	}
	if v, ok := cc.mutation.Content(); ok {
		if err := choice.ContentValidator(v); err != nil {
			return &ValidationError{Name: "content", err: fmt.Errorf(`ent: validator failed for field "Choice.content": %w`, err)}
		}
	}
	if _, ok := cc.mutation.IsCorrect(); !ok {
		return &ValidationError{Name: "is_correct", err: errors.New(`ent: missing required field "Choice.is_correct"`)}
	}
	if _, ok := cc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Choice.created_at"`)}
	}
	if v, ok := cc.mutation.ID(); ok {
		if err := choice.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "Choice.id": %w`, err)}
		}
	}
	if len(cc.mutation.QuestionIDs()) == 0 {
		return &ValidationError{Name: "question", err: errors.New(`ent: missing required edge "Choice.question"`)}
	}
	return nil
}

func (cc *ChoiceCreate) sqlSave(ctx context.Context) (*Choice, error) {
	if err := cc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	cc.mutation.id = &_node.ID
	cc.mutation.done = true
	return _node, nil
}

func (cc *ChoiceCreate) createSpec() (*Choice, *sqlgraph.CreateSpec) {
	var (
		_node = &Choice{config: cc.config}
		_spec = sqlgraph.NewCreateSpec(choice.Table, sqlgraph.NewFieldSpec(choice.FieldID, field.TypeInt))
	)
	if id, ok := cc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := cc.mutation.Content(); ok {
		_spec.SetField(choice.FieldContent, field.TypeString, value)
		_node.Content = value
	}
	if value, ok := cc.mutation.IsCorrect(); ok {
		_spec.SetField(choice.FieldIsCorrect, field.TypeBool, value)
		_node.IsCorrect = value
	}
	if value, ok := cc.mutation.CreatedAt(); ok {
		_spec.SetField(choice.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if nodes := cc.mutation.QuestionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   choice.QuestionTable,
			Columns: []string{choice.QuestionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(question.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.question_choices = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ChoiceCreateBulk is the builder for creating many Choice entities in bulk.
type ChoiceCreateBulk struct {
	config
	err      error
	builders []*ChoiceCreate
}

// Save creates the Choice entities in the database.
func (ccb *ChoiceCreateBulk) Save(ctx context.Context) ([]*Choice, error) {
	if ccb.err != nil {
		return nil, ccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ccb.builders))
	nodes := make([]*Choice, len(ccb.builders))
	mutators := make([]Mutator, len(ccb.builders))
	for i := range ccb.builders {
		func(i int, root context.Context) {
			builder := ccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ChoiceMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccb *ChoiceCreateBulk) SaveX(ctx context.Context) []*Choice {
	v, err := ccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccb *ChoiceCreateBulk) Exec(ctx context.Context) error {
	_, err := ccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccb *ChoiceCreateBulk) ExecX(ctx context.Context) {
	if err := ccb.Exec(ctx); err != nil {
		panic(err)
	}
}
