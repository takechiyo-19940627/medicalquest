// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/takechiyo-19940627/medicalquest/infrastructure/ent/choice"
	"github.com/takechiyo-19940627/medicalquest/infrastructure/ent/question"
)

// QuestionCreate is the builder for creating a Question entity.
type QuestionCreate struct {
	config
	mutation *QuestionMutation
	hooks    []Hook
}

// SetUID sets the "uid" field.
func (qc *QuestionCreate) SetUID(s string) *QuestionCreate {
	qc.mutation.SetUID(s)
	return qc
}

// SetReferenceCode sets the "reference_code" field.
func (qc *QuestionCreate) SetReferenceCode(s string) *QuestionCreate {
	qc.mutation.SetReferenceCode(s)
	return qc
}

// SetNillableReferenceCode sets the "reference_code" field if the given value is not nil.
func (qc *QuestionCreate) SetNillableReferenceCode(s *string) *QuestionCreate {
	if s != nil {
		qc.SetReferenceCode(*s)
	}
	return qc
}

// SetTitle sets the "title" field.
func (qc *QuestionCreate) SetTitle(s string) *QuestionCreate {
	qc.mutation.SetTitle(s)
	return qc
}

// SetContent sets the "content" field.
func (qc *QuestionCreate) SetContent(s string) *QuestionCreate {
	qc.mutation.SetContent(s)
	return qc
}

// SetCreatedAt sets the "created_at" field.
func (qc *QuestionCreate) SetCreatedAt(t time.Time) *QuestionCreate {
	qc.mutation.SetCreatedAt(t)
	return qc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (qc *QuestionCreate) SetNillableCreatedAt(t *time.Time) *QuestionCreate {
	if t != nil {
		qc.SetCreatedAt(*t)
	}
	return qc
}

// SetID sets the "id" field.
func (qc *QuestionCreate) SetID(i int) *QuestionCreate {
	qc.mutation.SetID(i)
	return qc
}

// AddChoiceIDs adds the "choices" edge to the Choice entity by IDs.
func (qc *QuestionCreate) AddChoiceIDs(ids ...int) *QuestionCreate {
	qc.mutation.AddChoiceIDs(ids...)
	return qc
}

// AddChoices adds the "choices" edges to the Choice entity.
func (qc *QuestionCreate) AddChoices(c ...*Choice) *QuestionCreate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return qc.AddChoiceIDs(ids...)
}

// Mutation returns the QuestionMutation object of the builder.
func (qc *QuestionCreate) Mutation() *QuestionMutation {
	return qc.mutation
}

// Save creates the Question in the database.
func (qc *QuestionCreate) Save(ctx context.Context) (*Question, error) {
	qc.defaults()
	return withHooks(ctx, qc.sqlSave, qc.mutation, qc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (qc *QuestionCreate) SaveX(ctx context.Context) *Question {
	v, err := qc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (qc *QuestionCreate) Exec(ctx context.Context) error {
	_, err := qc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (qc *QuestionCreate) ExecX(ctx context.Context) {
	if err := qc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (qc *QuestionCreate) defaults() {
	if _, ok := qc.mutation.CreatedAt(); !ok {
		v := question.DefaultCreatedAt()
		qc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (qc *QuestionCreate) check() error {
	if _, ok := qc.mutation.UID(); !ok {
		return &ValidationError{Name: "uid", err: errors.New(`ent: missing required field "Question.uid"`)}
	}
	if v, ok := qc.mutation.UID(); ok {
		if err := question.UIDValidator(v); err != nil {
			return &ValidationError{Name: "uid", err: fmt.Errorf(`ent: validator failed for field "Question.uid": %w`, err)}
		}
	}
	if _, ok := qc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "Question.title"`)}
	}
	if v, ok := qc.mutation.Title(); ok {
		if err := question.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Question.title": %w`, err)}
		}
	}
	if _, ok := qc.mutation.Content(); !ok {
		return &ValidationError{Name: "content", err: errors.New(`ent: missing required field "Question.content"`)}
	}
	if v, ok := qc.mutation.Content(); ok {
		if err := question.ContentValidator(v); err != nil {
			return &ValidationError{Name: "content", err: fmt.Errorf(`ent: validator failed for field "Question.content": %w`, err)}
		}
	}
	if _, ok := qc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Question.created_at"`)}
	}
	if v, ok := qc.mutation.ID(); ok {
		if err := question.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "Question.id": %w`, err)}
		}
	}
	return nil
}

func (qc *QuestionCreate) sqlSave(ctx context.Context) (*Question, error) {
	if err := qc.check(); err != nil {
		return nil, err
	}
	_node, _spec := qc.createSpec()
	if err := sqlgraph.CreateNode(ctx, qc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	qc.mutation.id = &_node.ID
	qc.mutation.done = true
	return _node, nil
}

func (qc *QuestionCreate) createSpec() (*Question, *sqlgraph.CreateSpec) {
	var (
		_node = &Question{config: qc.config}
		_spec = sqlgraph.NewCreateSpec(question.Table, sqlgraph.NewFieldSpec(question.FieldID, field.TypeInt))
	)
	if id, ok := qc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := qc.mutation.UID(); ok {
		_spec.SetField(question.FieldUID, field.TypeString, value)
		_node.UID = value
	}
	if value, ok := qc.mutation.ReferenceCode(); ok {
		_spec.SetField(question.FieldReferenceCode, field.TypeString, value)
		_node.ReferenceCode = &value
	}
	if value, ok := qc.mutation.Title(); ok {
		_spec.SetField(question.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := qc.mutation.Content(); ok {
		_spec.SetField(question.FieldContent, field.TypeString, value)
		_node.Content = value
	}
	if value, ok := qc.mutation.CreatedAt(); ok {
		_spec.SetField(question.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if nodes := qc.mutation.ChoicesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   question.ChoicesTable,
			Columns: []string{question.ChoicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(choice.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// QuestionCreateBulk is the builder for creating many Question entities in bulk.
type QuestionCreateBulk struct {
	config
	err      error
	builders []*QuestionCreate
}

// Save creates the Question entities in the database.
func (qcb *QuestionCreateBulk) Save(ctx context.Context) ([]*Question, error) {
	if qcb.err != nil {
		return nil, qcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(qcb.builders))
	nodes := make([]*Question, len(qcb.builders))
	mutators := make([]Mutator, len(qcb.builders))
	for i := range qcb.builders {
		func(i int, root context.Context) {
			builder := qcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*QuestionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, qcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, qcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, qcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (qcb *QuestionCreateBulk) SaveX(ctx context.Context) []*Question {
	v, err := qcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (qcb *QuestionCreateBulk) Exec(ctx context.Context) error {
	_, err := qcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (qcb *QuestionCreateBulk) ExecX(ctx context.Context) {
	if err := qcb.Exec(ctx); err != nil {
		panic(err)
	}
}
